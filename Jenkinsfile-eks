pipeline {
<<<<<<< HEAD
    agent any // Specifies that the pipeline can run on any available agent.

    parameters {   // Defines user inputs for the pipeline.
=======
    agent any

    parameters {
>>>>>>> 01f3f5598e1685ca606978e5c816e4ed785ee913
        choice(
            name: 'ACTION',
            choices: ['apply', 'destroy'],
            description: 'Choose the Terraform action to perform'
        )
    }

    environment {
<<<<<<< HEAD
        AWS_ACCESS_KEY_ID = credentials('AWS Credentials')  // Fetch AWS credentials using the ID 'AWS Credentials' from Jenkins credentials store.
=======
        AWS_ACCESS_KEY_ID = credentials('AWS Credentials')
>>>>>>> 01f3f5598e1685ca606978e5c816e4ed785ee913
        AWS_SECRET_ACCESS_KEY = credentials('AWS Credentials')
    }

    stages {
        stage('Checkout code') {
            steps {
                git branch: 'main', url: 'https://github.com/Gabinsime75/Project_15--Register-App.git'
            }
        }

        stage('List files') {
            steps {
                sh 'ls -la'
                sh 'ls -la EKS_Terraform'
            }
        }

        stage('Terraform init') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS Credentials']]) {
                    dir('./EKS_Terraform') {
                        sh 'terraform init'
                    }
                }
            }
        }

        stage('Terraform validate') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS Credentials']]) {
                    dir('./EKS_Terraform') {
                        sh 'terraform validate'
                    }
                }
            }
        }

<<<<<<< HEAD
        stage('Tfsec') {  // This stage will ensure that your Terraform code is checked for potential security vulnerabilities before proceeding with the plan and apply/destroy stages
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS Credentials']]) {
                    dir('./EKS_Terraform') {
                        sh 'tfsec . --severity CRITICAL --out tfsec-report.json --format json' // Runs tfsec and filters results to include only critical issues, outputting them in JSON format to tfsec-report.json.
                    }
                }
            }

            post {
                always {  // Archives the tfsec report file, ensuring it is stored as a build artifact even if the stage fails.
                    archiveArtifacts artifacts: 'EKS_Terraform/tfsec-report.json', allowEmptyArchive: true
                }
            }
        }


=======
>>>>>>> 01f3f5598e1685ca606978e5c816e4ed785ee913
        stage('Terraform plan') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS Credentials']]) {
                    dir('./EKS_Terraform') {
                        sh 'terraform plan'
                    }
                }
            }
        }

        stage('Terraform apply/destroy') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS Credentials']]) {
                    dir('./EKS_Terraform') {
                        sh "terraform ${params.ACTION} --auto-approve"
                    }
                }
            }
        }
    }
<<<<<<< HEAD
}
=======
}
>>>>>>> 01f3f5598e1685ca606978e5c816e4ed785ee913

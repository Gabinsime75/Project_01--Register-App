pipeline {
    agent any // Specifies that the pipeline can run on any available agent.

    parameters {
        choice(
            name: 'ACTION',
            choices: ['apply', 'destroy'],
            description: 'Choose the Terraform action to perform'
        )
    }

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS Credentials')
        AWS_SECRET_ACCESS_KEY = credentials('AWS Credentials')
    }

    stages {
        stage('Checkout code') {
            steps {
                git branch: 'main', url: 'https://github.com/Gabinsime75/Project_02--Register-App.git', credentialsId: 'github'
            }
        }

        stage('Terraform init') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS Credentials']]) {
                    dir('./EKS_Terraform') {
                        sh 'terraform init'
                    }
                }
            }
        }

        stage('Terraform validate') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS Credentials']]) {
                    dir('./EKS_Terraform') {
                        sh 'terraform validate'
                    }
                }
            }
        }
        stage ('Pull tfsec Docker Image') {
            steps {
                script {
                    sh 'docker pull aquasec/tfsec'
                }
            }
        }

        stage('Tfsec') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'AWS Credentials',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    dir('./EKS_Terraform') {
                        sh 'docker run --rm -v $(pwd):/src aquasec/tfsec /src --severity CRITICAL --out tfsec-report.json --format json'
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'EKS_Terraform/tfsec-report.json', allowEmptyArchive: true
                }
            }
        }


        stage('Terraform plan') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS Credentials']]) {
                    dir('./EKS_Terraform') {
                        sh 'terraform plan'
                    }
                }
            }
        }

        stage('Terraform apply/destroy') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS Credentials']]) {
                    dir('./EKS_Terraform') {
                        sh "terraform ${params.ACTION} --auto-approve"
                    }
                }
            }
        }
    }
}


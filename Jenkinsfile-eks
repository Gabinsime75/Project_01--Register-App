pipeline {
    agent any // Specifies that the pipeline can run on any available agent.

    parameters {
        choice(
            name: 'ACTION',
            choices: ['apply', 'destroy'],
            description: 'Choose the Terraform action to perform'
        )
    }

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS Credentials')
        AWS_SECRET_ACCESS_KEY = credentials('AWS Credentials')
    }

    stages {
        stage('Checkout code') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/Gabinsime75/Project_02--Register-App.git']], credentialsId: 'github'])
            }
        }
    stage('Check Git Path') {
        steps {
            sh 'which git'  // This prints the path to the Git executable
            sh 'ls -la /home/ubuntu/workspace/Terrform-CI/EKS_Terraform'
        }
    }

    stage('Check EKS_Terraform directory') {
        steps {
            sh 'ls -la /home/ubuntu/workspace/Terrform-CI/EKS_Terraform'
            }
        }

        stage('Terraform init') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS Credentials']]) {
                    dir('./EKS_Terraform') {
                        sh 'terraform init'
                    }
                }
            }
        }

        stage('Terraform validate') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS Credentials']]) {
                    dir('./EKS_Terraform') {
                        sh 'terraform validate'
                    }
                }
            }
        }

        stage('Terraform plan') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS Credentials']]) {
                    dir('./EKS_Terraform') {
                        sh 'terraform plan'
                    }
                }
            }
        }

        stage('Terraform apply/destroy') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS Credentials']]) {
                    dir('./EKS_Terraform') {
                        sh "terraform ${params.ACTION} --auto-approve"
                    }
                }
            }
        }
    }
}

